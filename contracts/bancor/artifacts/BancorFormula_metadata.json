{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_primaryReserveStakedBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_primaryReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_secondaryReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveRateNumerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveRateDenominator",
						"type": "uint256"
					}
				],
				"name": "balancedWeights",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_sourceReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_sourceReserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_targetReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_targetReserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "calculateCrossConnectorReturn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_sourceReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_sourceReserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_targetReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_targetReserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "calculateCrossReserveReturn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveRatio",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "calculateFundCost",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveRatio",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "calculateLiquidateReturn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "calculatePurchaseReturn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "calculateSaleReturn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_sourceReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_sourceReserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_targetReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_targetReserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "crossReserveRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_sourceReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_sourceReserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_targetReserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_targetReserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "crossReserveTargetAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveRatio",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "fundCost",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveRatio",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "fundSupplyAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveRatio",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "liquidateRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveRatio",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "liquidateReserveAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "purchaseRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "purchaseTargetAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "saleRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_supply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reserveBalance",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_reserveWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "saleTargetAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"balancedWeights(uint256,uint256,uint256,uint256,uint256)": {
					"details": "The arbitrage incentive is to convert to the point where the on-chain price is equal to the off-chain price. We want this operation to also impact the primary reserve balance becoming equal to the primary reserve staked balance. In other words, we want the arbitrager to convert the difference between the reserve balance and the reserve staked balance. Formula input: - let t denote the primary reserve token staked balance - let s denote the primary reserve token balance - let r denote the secondary reserve token balance - let q denote the numerator of the rate between the tokens - let p denote the denominator of the rate between the tokens Where p primary tokens are equal to q secondary tokens Formula output: - compute x = W(t / r * q / p * log(s / t)) / log(s / t) - return x / (1 + x) as the weight of the primary reserve token - return 1 / (1 + x) as the weight of the secondary reserve token Where W is the Lambert W Function If the rate-provider provides the rates for a common unit, for example: - P = 2 ==> 2 primary reserve tokens = 1 ether - Q = 3 ==> 3 secondary reserve tokens = 1 ether Then you can simply use p = P and q = Q If the rate-provider provides the rates for a single unit, for example: - P = 2 ==> 1 primary reserve token = 2 ethers - Q = 3 ==> 1 secondary reserve token = 3 ethers Then you can simply use p = Q and q = P",
					"params": {
						"_primaryReserveBalance": "the primary reserve token balance",
						"_primaryReserveStakedBalance": "the primary reserve token staked balance",
						"_reserveRateDenominator": "the denominator of the rate between the tokens Note that `numerator / denominator` should represent the amount of secondary tokens equal to one primary token",
						"_reserveRateNumerator": "the numerator of the rate between the tokens",
						"_secondaryReserveBalance": "the secondary reserve token balance"
					},
					"returns": {
						"_0": "the weight of the primary reserve token and the weight of the secondary reserve token, both in ppm (0-1000000)"
					}
				},
				"calculateCrossConnectorReturn(uint256,uint32,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"calculateCrossReserveReturn(uint256,uint32,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"calculateFundCost(uint256,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"calculateLiquidateReturn(uint256,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"calculatePurchaseReturn(uint256,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"calculateSaleReturn(uint256,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"crossReserveRate(uint256,uint32,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"crossReserveTargetAmount(uint256,uint32,uint256,uint32,uint256)": {
					"details": "given two reserve balances/weights and a sell amount (in the first reserve token), calculates the target amount for a conversion from the source reserve token to the target reserve token Formula: return = _targetReserveBalance * (1 - (_sourceReserveBalance / (_sourceReserveBalance + _amount)) ^ (_sourceReserveWeight / _targetReserveWeight))",
					"params": {
						"_amount": "source reserve amount",
						"_sourceReserveBalance": "source reserve balance",
						"_sourceReserveWeight": "source reserve weight, represented in ppm (1-1000000)",
						"_targetReserveBalance": "target reserve balance",
						"_targetReserveWeight": "target reserve weight, represented in ppm (1-1000000)"
					},
					"returns": {
						"_0": "target reserve amount"
					}
				},
				"fundCost(uint256,uint256,uint32,uint256)": {
					"details": "given a pool token supply, reserve balance, reserve ratio and an amount of requested pool tokens, calculates the amount of reserve tokens required for purchasing the given amount of pool tokens Formula: return = _reserveBalance * (((_supply + _amount) / _supply) ^ (MAX_WEIGHT / _reserveRatio) - 1)",
					"params": {
						"_amount": "requested amount of pool tokens",
						"_reserveBalance": "reserve balance",
						"_reserveRatio": "reserve ratio, represented in ppm (2-2000000)",
						"_supply": "pool token supply"
					},
					"returns": {
						"_0": "reserve token amount"
					}
				},
				"fundSupplyAmount(uint256,uint256,uint32,uint256)": {
					"details": "given a pool token supply, reserve balance, reserve ratio and an amount of reserve tokens to fund with, calculates the amount of pool tokens received for purchasing with the given amount of reserve tokens Formula: return = _supply * ((_amount / _reserveBalance + 1) ^ (_reserveRatio / MAX_WEIGHT) - 1)",
					"params": {
						"_amount": "amount of reserve tokens to fund with",
						"_reserveBalance": "reserve balance",
						"_reserveRatio": "reserve ratio, represented in ppm (2-2000000)",
						"_supply": "pool token supply"
					},
					"returns": {
						"_0": "pool token amount"
					}
				},
				"init()": {
					"details": "should be executed after construction (too large for the constructor)"
				},
				"liquidateRate(uint256,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"liquidateReserveAmount(uint256,uint256,uint32,uint256)": {
					"details": "given a pool token supply, reserve balance, reserve ratio and an amount of pool tokens to liquidate, calculates the amount of reserve tokens received for selling the given amount of pool tokens Formula: return = _reserveBalance * (1 - ((_supply - _amount) / _supply) ^ (MAX_WEIGHT / _reserveRatio))",
					"params": {
						"_amount": "amount of pool tokens to liquidate",
						"_reserveBalance": "reserve balance",
						"_reserveRatio": "reserve ratio, represented in ppm (2-2000000)",
						"_supply": "pool token supply"
					},
					"returns": {
						"_0": "reserve token amount"
					}
				},
				"purchaseRate(uint256,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"purchaseTargetAmount(uint256,uint256,uint32,uint256)": {
					"details": "given a token supply, reserve balance, weight and a deposit amount (in the reserve token), calculates the target amount for a given conversion (in the main token) Formula: return = _supply * ((1 + _amount / _reserveBalance) ^ (_reserveWeight / 1000000) - 1)",
					"params": {
						"_amount": "amount of reserve tokens to get the target amount for",
						"_reserveBalance": "reserve balance",
						"_reserveWeight": "reserve weight, represented in ppm (1-1000000)",
						"_supply": "liquid token supply"
					},
					"returns": {
						"_0": "target"
					}
				},
				"saleRate(uint256,uint256,uint32,uint256)": {
					"details": "deprecated, backward compatibility"
				},
				"saleTargetAmount(uint256,uint256,uint32,uint256)": {
					"details": "given a token supply, reserve balance, weight and a sell amount (in the main token), calculates the target amount for a given conversion (in the reserve token) Formula: return = _reserveBalance * (1 - (1 - _amount / _supply) ^ (1000000 / _reserveWeight))",
					"params": {
						"_amount": "amount of liquid tokens to get the target amount for",
						"_reserveBalance": "reserve balance",
						"_reserveWeight": "reserve weight, represented in ppm (1-1000000)",
						"_supply": "liquid token supply"
					},
					"returns": {
						"_0": "reserve token amount"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/bancor/BancorFormula.sol": "BancorFormula"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/bancor/BancorFormula.sol": {
			"keccak256": "0x2f12e8e3cefda11b9c9c5dffd2e25f55075a77bc5edb012091c92525a23f65db",
			"license": "SEE LICENSE IN LICENSE",
			"urls": [
				"bzz-raw://d126e65889af1e2c384301f5867e1781c3a4209a8465efa2c0d3f5e53c91c853",
				"dweb:/ipfs/QmRus2opACMBzmCK8NRKLR81YbbBDjsVsFhxAcyjQri4ED"
			]
		},
		"localhost/contracts/bancor/IBancorFormula.sol": {
			"keccak256": "0xf30c95034af4c4ec6e8a859e90cf7a0bada29a805ede76e04644107a7c677c4e",
			"license": "SEE LICENSE IN LICENSE",
			"urls": [
				"bzz-raw://b48070d4abf9c4a08c39e6c494fa9efd7389aa7f8b61b283c9ba02062b1c59b6",
				"dweb:/ipfs/Qme6U7SpspFPzMH2mTyKsXCnJEAgg1vX6NNFzuykbVSY5R"
			]
		},
		"localhost/contracts/utility/SafeMath.sol": {
			"keccak256": "0x21d065313cbc0a1ce9a84f453e87efd0a7c26ca6439676ba586bb533a89d62d3",
			"license": "SEE LICENSE IN LICENSE",
			"urls": [
				"bzz-raw://33a2d7ad279be1542d0f99da7be8de1d57d8f27f015978bf09130d674f4d3cfb",
				"dweb:/ipfs/QmaJQChV3mRPm3SJJxyBjzQqyWLqYjzNPrDSTHNjFd5v9c"
			]
		}
	},
	"version": 1
}